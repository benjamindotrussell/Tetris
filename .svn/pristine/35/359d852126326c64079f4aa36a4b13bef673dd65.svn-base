package view;

import java.awt.Graphics;
import java.awt.Graphics2D;

import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;

import model.AbstractPiece;
import model.Block;
import model.Board;
import model.Piece;
/** 
 * 
 * @author Ben Russell
 * @version 12/10/2015
 *
 */
public class TetrisPanel extends JPanel implements Observer {
    /** needed for some reason. */    
    private static final long serialVersionUID = 5779064686408370535L;
    /** constant for the size of a block. */
    private static final int BLOCK_SIZE = 20;
    
    /** field for the board. */
    private final Board myTetris;
    
    /**
     * constructor.
     * @param theBoard instance of the board.
     */
    public TetrisPanel(final Board theBoard) {
        super();
        myTetris = theBoard;
        
        repaint();
        
    }
    @Override 
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        
        
        //g2d.drawRect(0, 100, 200, 400);
        final Piece p = myTetris.getCurrentPiece();
        
        final int[][] coords = ((AbstractPiece) p).getBoardCoordinates();
        
        if (coords != null) {
            for (int i = 0; i < coords.length; i++) {
                g2d.drawRect(coords[i][0] * BLOCK_SIZE
                          , (myTetris.getHeight() - coords[i][1]) 
                                   * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
            }
        }
       
        final List<Block[]> f = myTetris.getFrozenBlocks();
        
        for (int i = 0; i < f.size(); i++) {
            final Block[] b = f.get(i);
            for (int j = 0; j < b.length; j++) {
                final Block v = b[j];
                if (v != Block.EMPTY) {
                    g2d.drawRect(j * BLOCK_SIZE, getHeight() -  i 
                                 * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
                }
                
            }
        }
        
    }
    
    @Override
    public void update(final Observable arg0, final Object arg1) {
       
        repaint();
    }

}
